// For File Operations
let fs = require('fs');

// Storing the individual dependencies
let addDepenencies = (input) => {
    return input;
}

// Trigger for code generation
let generate = (input) => {
    generateOutput(input);
};

// For flattening the arrays (Refer to: https://stackoverflow.com/questions/27266550/how-to-flatten-nested-array-in-javascript)
let flatten = function(arr, result = []) {
    for (let i = 0, length = arr.length; i < length; i++) {
      const value = arr[i];
      if (Array.isArray(value)) {
        flatten(value, result);
      } else {
        result.push(value);
      }
    }
    return result;
};

// Adds 'require' lines to import the required dependencies
let writeHeader = (dependency) => {
    return `let { ${dependency.set.name} } = require('./${dependency.filePath}'); \n`
};

// Adds the middle core to call the functions and store them inside variables
let writeMiddle = (input) => {
    res = "\nlet code = () => { \n"
    index = 0;
    res += '  try {'
    input.forEach(element => {
        let previousRes = index != 0 ? `val_${index-1}` : ''; 
        res += ` \n    val_${index} = ${element.set.name}(${previousRes});`
        index += 1;
    });
    res += `\n    return val_${index-1}; \n  } catch(err) {return err;}`;
    res += "\n};";
    res += "\nmodule.exports = code;";
    return res;
}

// Generates output file with injected dependencies (code generation)
let generateOutput = (input) => {
    output = '';
    input = flatten(input);
    output += '// DO NOT EDIT! GENERATED BY DEPENJEKT!\n \n'
    input.forEach(dependency => {
        output += writeHeader(dependency);
    });
    output += writeMiddle(input);
    let writeStream = fs.createWriteStream('generated.js');
    writeStream.write(output);
    writeStream.end();
    console.log("Generated successfully as generated.js")
};

module.exports = {
    addDepenencies,
    generate
};